<?php

namespace {{ class.className.namespace }};

use InvalidArgumentException;

final class {{ class.className.name }}
{
    {% for constant in class.constants %}const {{ constant.name }} = {{ constant.valueForTemplate|raw }};
    {% endfor %}

    const POSSIBLE_VALUES = [
    {% for constant in class.constants %}
    self::{{ constant.name }},
    {% endfor -%}];

    /**
     * @param string ${{ class.className.forParameter }}
     */
    private function __construct(string ${{ class.className.forParameter }})
    {
        if (!in_array(${{ class.className.forParameter }}, self::POSSIBLE_VALUES, true)) {
            throw new InvalidArgumentException('Invalid value');
        }

        $this->{{ class.className.forParameter }} = ${{ class.className.forParameter }};
    }

    /**
     * @param string ${{ class.className.forParameter }}
     *
     * @return self
     */
    public static function fromString(string ${{ class.className.forParameter }}): self
    {
        return new self(${{ class.className.forParameter }});
    }

    /**
     * @return string
     */
    public function __toString(): string
    {
        return (string) $this->{{ class.className.forParameter }};
    }

    /**
     * @param self ${{ class.className.forParameter }}
     *
     * @return bool
     */
    public function equals(self ${{ class.className.forParameter }}): bool
    {
        if (!(${{ class.className.forParameter }} instanceof $this)) {
            return false;
        }

        return ${{ class.className.forParameter }} == $this;
    }
{% for constant in class.constants %}

    /**
     * @return self
     */
    public static function {{ constant.camelCasedName }}(): self
    {
        return new self(self::{{ constant.name }});
    }

    /**
     * @return bool
     */
    public function is{{ constant.camelCasedName(true) }}(): bool
    {
        return $this->equals(self::{{ constant.camelCasedName }}());
    }
{% endfor -%}
}
