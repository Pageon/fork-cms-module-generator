<?php

namespace {{ class.className.namespace }};

use Doctrine\ORM\Mapping as ORM;

/**
 * @ORM\Table(name="{{ class.tableName }}")
 * @ORM\Entity(repositoryClass="{{ class.className.namespace }}\{{ class.tableName }}Repository")
 */
final class {{ class.className.name }}
{
    /**
     * @var int
     *
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     * @ORM\Column(type="integer")
     */
    private $id;
{% for parameter in class.parameters %}

    /**
     * @var {{ parameter.dbalType.phpType }}{% if parameter.nullable %}|null{% endif %}

     *
     * @ORM\Column(type="{{ parameter.dbalType }}"{% if parameter.nullable %}, nullable=true{% endif %})
     */
    private ${{ parameter.name }};
{% endfor %}
{% if class.parameters|length > 0 %}

    public function __construct(
    {% for parameter in class.parameters %}
    {{ parameter.dbalType.phpType }} ${{ parameter.name }}{% if not loop.last %},
    {% endif %}
{% endfor %}

    ) {
    {% for parameter in class.parameters %}
    $this->{{ parameter.name }} = ${{ parameter.name }};
    {% endfor -%}
}
{% endif %}

    public function getId(): int
    {
        return $this->id;
    }
{% for parameter in class.parameters %}

    public function get{{ parameter.name|capitalize }}(): {% if parameter.nullable %}?{% endif %}{{ parameter.dbalType.phpType }}
    {
        return $this->{{ parameter.name }};
    }
{% endfor %}

    public static function fromDataTransferObject({{ class.className.name }}DataTransferObject $dataTransferObject): self
    {
        if ($dataTransferObject->hasExisting{{ class.className.name }}()) {
{% if class.parameters is empty %}
            return $dataTransferObject->get{{ class.className.name }}Entity();
{% else %}
            ${{ class.className.forParameter }} = $dataTransferObject->get{{ class.className.name }}Entity();
{% for parameter in class.parameters %}
            ${{ class.className.forParameter }}->{{ parameter.name }} = $dataTransferObject->{{ parameter.name }};
{% endfor %}

            return ${{ class.className.forParameter }};
{% endif %}
        }

{% if class.parameters is empty %}
        return new self();
{% else %}
        return new self(
{% for parameter in class.parameters %}
            $dataTransferObject->{{ parameter.name }}{% if not loop.last %},
{% endif %}
{% endfor %}

        );
{% endif %}
    }
}
