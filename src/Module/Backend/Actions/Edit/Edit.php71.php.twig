<?php

namespace {{ class.className.namespace }};

use Backend\Core\Engine\Base\ActionEdit;
use Backend\Form\Type\DeleteType;
use {{ class.entityClassName.forUseStatement }};
use {{ class.entityClassName.namespace }}\Command\Update{{ class.entityClassName }};
use Backend\Core\Engine\Model as BackendModel;
use {{ class.entityClassName.forUseStatement }}Repository;
use {{ class.entityClassName.forUseStatement }}Type;
use Symfony\Component\Form\Form;

final class {{ class.className }} extends ActionEdit
{
    public function execute(): void
    {
        parent::execute();

        ${{ class.entityClassName.forParameter }} = $this->get{{ class.entityClassName }}();

        if (!${{ class.entityClassName.forParameter }} instanceof {{ class.entityClassName }}) {
            $this->redirect($this->getBackLink(['error' => 'non-existing']));
        }

        $this->loadDeleteForm(${{ class.entityClassName.forParameter }});

        $form = $this->getForm(${{ class.entityClassName.forParameter }});

        if (!$form->isSubmitted() || !$form->isValid()) {
            $this->template->assign('form', $form->createView());
            $this->template->assign('{{ class.entityClassName.forParameter }}', ${{ class.entityClassName.forParameter }});

            $this->parse();
            $this->display();

            return;
        }

        $this->handleForm($form);
    }

    private function loadDeleteForm({{ class.entityClassName.name }} ${{ class.entityClassName.forParameter }}): void
    {
        $deleteForm = $this->createForm(
            DeleteType::class,
            ['id' => ${{ class.entityClassName.forParameter }}->getId()],
            [
                'module' => $this->getModule(),
                'action' => '{{ class.entityClassName }}Delete',
            ]
        );

        $this->template->assign('deleteForm', $deleteForm->createView());
    }

    private function getForm({{ class.entityClassName }} ${{ class.entityClassName.forParameter }}): Form
    {
        $form = $this->createForm({{ class.entityClassName }}Type::class, new Update{{ class.entityClassName }}(${{ class.entityClassName.forParameter }}));

        $form->handleRequest($this->getRequest());

        return $form;
    }

    private function handleForm(Form $form): void
    {
        $update{{ class.entityClassName }} = $form->getData();

        $this->get('command_bus')->handle($update{{ class.entityClassName }});

        $this->redirect(
            $this->getBackLink(
                [
                    'report' => 'edited',
                    'var' => $update{{ class.entityClassName }}->title,
                ]
            )
        );
    }

    private function getBackLink(array $parameters = []): string
    {
        return BackendModel::createUrlForAction(
            '{{ class.entityClassName }}Index',
            null,
            null,
            $parameters
        );
    }

    private function get{{ class.entityClassName }}(): ?{{ class.entityClassName }}
    {
        return $this->get({{ class.entityClassName }}Repository::class)->find($this->getRequest()->query->getInt('id'));
    }
}
